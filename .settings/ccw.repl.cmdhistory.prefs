cmdhistory=["(union-find)" "(union-find 1 2 3 4 5)" "(-> (union-find 1 2 3 4 5) .site-props)" "(-> (union-find 1 2 3 4 5))" "(-> (union-find 1 2 3 4 5) count)" "(-> (union-find 1 2 3 4 5) (conj 6) count)" "(-> (union-find 1 2 3 4 5) (conj 6) )" "(->> (union-find 1 2 3 4 5) (cons 6) )" "(into (union-find) [1 2 3 4])" "(-> (union-find) (into [1 2 3 4]))" "(-> (union-find) (into [1 2 3 4]) (conj 3))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) count-sites)" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (find -1))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (find 2))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) ( 2))" "((-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0)) 2)" "((-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0)) -1 \:not-found)" "((-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 1 3)))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 1 3))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 1 3) (union 1 4))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 1 3) (union 1 4) (union 2 3))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 1 3) (union 1 4) (union 2 3) (union 4 5))" "(-> (union-find) (into [1 2 3 4]) (conj 3) (conj 0) (union 4 5))" "(-> (union-find))" "(-> (union-find [1 2 3 4]))" "(-> (union-find [1 2 3 4]) (conj 5))" "(-> (union-find 1 2 3 4))" "(-> (union-find) (into [1 2 3 4]))" "(-> (union-find) (conj 1))" "(-> (union-find 1 2 3 4) (find 2))" "(-> (union-find 1 2 3 4) (find -1))" "(let [uf (union-find 1 2 3 4)]\\n  [(uf 2) (uf -1 \:not-found)])" "(-> (union-find 1 2 3 4) (union 1 3 2 4))" "(-> (union-find 1 2 3 4) (union 1 3) (union 2 4))" "(-> (union-find 1 2 3 4) (union 2 4) (union 1 3))" "(-> (union-find 1 2 3 4) (union 4 2) (union 3 1))" "(-> (union-find 1 2 3 4) (union 1 3))" "(-> (union-find 1 2 3 4) (union 3 1))" "(\= (-> (union-find 1 2 3 4) (union 3 1)) (-> (union-find 1 2 3 4) (union 3 1)))" "(\= (-> (union-find 1 2 3 4) (union 3 1)) (-> (union-find 1 2 3 4) (union 1 3)))" "(def uf (let [N 10000\\n              uf (apply union-find (range N))]\\n          (reduce union uf (repeatedly N \#(vec (rand-int N) (rand-int N))))))" "(def uf (let [N 10000\\n              uf (apply union-find (range N))]\\n          (reduce union uf (repeatedly N \#(vector (rand-int N) (rand-int N))))))" "(def uf (let [N 10000\\n              uf (apply union-find (range N))]\\n          (reduce \#(union %1 (first %2) (second %2)) uf (repeatedly N \#(vector (rand-int N) (rand-int N))))))" "(def uf (let [N 100000\\n              uf (apply union-find (range N))]\\n          (reduce \#(union %1 (first %2) (second %2)) uf (repeatedly N \#(vector (rand-int N) (rand-int N))))))" "(uf 20)" "(uf 1909)" "(count-sites uf)" "(def uf (let [N 100000\\n              uf (apply union-find (range N))]\\n          (reduce \#(union %1 (first %2) (second %2)) uf (repeatedly N \#(vector (rand-int N) (rand-int N))))))" "(count-sites uf)" "(take 10 uf)" "(take 10 (sort uf))" "(take 10 (sort (seq uf)))" "(def uf (let [N 1000000\\n              uf (apply union-find (range N))]\\n          (reduce \#(union %1 (first %2) (second %2)) uf (repeatedly N \#(vector (rand-int N) (rand-int N))))))" "(take 10 (sort (seq uf)))" "(find uf 4)" "(find uf 63)" "(seq (-> (union-find 1 2 3 4) (union 1 3)))" " (-> (union-find 1 2 3 4) (union 1 3))" " (-> (union-find 1 2 3 4) (union 1 3) count)" "(count {})" "(count {\:a \:b})" " (-> (union-find 1 2 3 4) (union 1 3) count-sites)"]
eclipse.preferences.version=1
